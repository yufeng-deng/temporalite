// The MIT License
//
// Copyright (c) 2022 Temporal Technologies Inc.  All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: temporal/api/enums/v1/command_type.proto

package enums

import (
	fmt "fmt"
	math "math"
	strconv "strconv"

	proto "github.com/gogo/protobuf/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Whenever this list of command types is changed do change the function shouldBufferEvent in mutableStateBuilder.go to make sure to do the correct event ordering.
type CommandType int32

const (
	COMMAND_TYPE_UNSPECIFIED                                CommandType = 0
	COMMAND_TYPE_SCHEDULE_ACTIVITY_TASK                     CommandType = 1
	COMMAND_TYPE_REQUEST_CANCEL_ACTIVITY_TASK               CommandType = 2
	COMMAND_TYPE_START_TIMER                                CommandType = 3
	COMMAND_TYPE_COMPLETE_WORKFLOW_EXECUTION                CommandType = 4
	COMMAND_TYPE_FAIL_WORKFLOW_EXECUTION                    CommandType = 5
	COMMAND_TYPE_CANCEL_TIMER                               CommandType = 6
	COMMAND_TYPE_CANCEL_WORKFLOW_EXECUTION                  CommandType = 7
	COMMAND_TYPE_REQUEST_CANCEL_EXTERNAL_WORKFLOW_EXECUTION CommandType = 8
	COMMAND_TYPE_RECORD_MARKER                              CommandType = 9
	COMMAND_TYPE_CONTINUE_AS_NEW_WORKFLOW_EXECUTION         CommandType = 10
	COMMAND_TYPE_START_CHILD_WORKFLOW_EXECUTION             CommandType = 11
	COMMAND_TYPE_SIGNAL_EXTERNAL_WORKFLOW_EXECUTION         CommandType = 12
	COMMAND_TYPE_UPSERT_WORKFLOW_SEARCH_ATTRIBUTES          CommandType = 13
	// Indicates that an update has been accepted for processing workflow code
	COMMAND_TYPE_ACCEPT_WORKFLOW_UPDATE CommandType = 14
	// Indicates that an update has completed and carries either the success or
	// failure outcome of said update.
	COMMAND_TYPE_COMPLETE_WORKFLOW_UPDATE   CommandType = 15
	COMMAND_TYPE_MODIFY_WORKFLOW_PROPERTIES CommandType = 16
	COMMAND_TYPE_REJECT_WORKFLOW_UPDATE     CommandType = 17
)

var CommandType_name = map[int32]string{
	0:  "Unspecified",
	1:  "ScheduleActivityTask",
	2:  "RequestCancelActivityTask",
	3:  "StartTimer",
	4:  "CompleteWorkflowExecution",
	5:  "FailWorkflowExecution",
	6:  "CancelTimer",
	7:  "CancelWorkflowExecution",
	8:  "RequestCancelExternalWorkflowExecution",
	9:  "RecordMarker",
	10: "ContinueAsNewWorkflowExecution",
	11: "StartChildWorkflowExecution",
	12: "SignalExternalWorkflowExecution",
	13: "UpsertWorkflowSearchAttributes",
	14: "AcceptWorkflowUpdate",
	15: "CompleteWorkflowUpdate",
	16: "ModifyWorkflowProperties",
	17: "RejectWorkflowUpdate",
}

var CommandType_value = map[string]int32{
	"Unspecified":                            0,
	"ScheduleActivityTask":                   1,
	"RequestCancelActivityTask":              2,
	"StartTimer":                             3,
	"CompleteWorkflowExecution":              4,
	"FailWorkflowExecution":                  5,
	"CancelTimer":                            6,
	"CancelWorkflowExecution":                7,
	"RequestCancelExternalWorkflowExecution": 8,
	"RecordMarker":                           9,
	"ContinueAsNewWorkflowExecution":         10,
	"StartChildWorkflowExecution":            11,
	"SignalExternalWorkflowExecution":        12,
	"UpsertWorkflowSearchAttributes":         13,
	"AcceptWorkflowUpdate":                   14,
	"CompleteWorkflowUpdate":                 15,
	"ModifyWorkflowProperties":               16,
	"RejectWorkflowUpdate":                   17,
}

func (CommandType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e70af5ad8bd10de0, []int{0}
}

func init() {
	proto.RegisterEnum("temporal.api.enums.v1.CommandType", CommandType_name, CommandType_value)
}

func init() {
	proto.RegisterFile("temporal/api/enums/v1/command_type.proto", fileDescriptor_e70af5ad8bd10de0)
}

var fileDescriptor_e70af5ad8bd10de0 = []byte{
	// 536 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x93, 0xcb, 0x6e, 0xd3, 0x40,
	0x18, 0x85, 0xed, 0x02, 0x05, 0xa6, 0x5c, 0xcc, 0x48, 0x95, 0x0a, 0x82, 0x91, 0x10, 0x97, 0xde,
	0xc0, 0x56, 0xe8, 0x02, 0xc9, 0x5d, 0x4d, 0xc6, 0x7f, 0xc8, 0x10, 0xdf, 0x18, 0x8f, 0x93, 0x86,
	0xcd, 0x28, 0x40, 0x84, 0x2c, 0x91, 0xda, 0x2a, 0xa1, 0x52, 0x77, 0x3c, 0x02, 0x6b, 0x9e, 0x00,
	0xf1, 0x04, 0x3c, 0x02, 0xcb, 0x2c, 0xbb, 0x24, 0xce, 0x06, 0xb1, 0xea, 0x23, 0xa0, 0x26, 0x44,
	0x8d, 0x13, 0xab, 0xec, 0x2c, 0xff, 0xdf, 0x39, 0xff, 0x19, 0x7b, 0x0e, 0xda, 0xe8, 0x77, 0x7b,
	0x59, 0x7a, 0xd0, 0xf9, 0x60, 0x75, 0xb2, 0xc4, 0xea, 0xee, 0x7f, 0xea, 0x7d, 0xb4, 0x0e, 0x2b,
	0xd6, 0xdb, 0xb4, 0xd7, 0xeb, 0xec, 0xbf, 0x53, 0xfd, 0xa3, 0xac, 0x6b, 0x66, 0x07, 0x69, 0x3f,
	0xc5, 0xab, 0x53, 0xd2, 0xec, 0x64, 0x89, 0x39, 0x26, 0xcd, 0xc3, 0xca, 0xd6, 0xd7, 0x65, 0xb4,
	0xc2, 0x26, 0xb4, 0x3c, 0xca, 0xba, 0xf8, 0x2e, 0x5a, 0x63, 0x81, 0xe7, 0x51, 0xdf, 0x51, 0xb2,
	0x1d, 0x82, 0x8a, 0xfd, 0x28, 0x04, 0xc6, 0x6b, 0x1c, 0x1c, 0x43, 0xc3, 0xeb, 0xe8, 0x41, 0x61,
	0x1a, 0xb1, 0x3a, 0x38, 0xb1, 0x0b, 0x8a, 0x32, 0xc9, 0x9b, 0x5c, 0xb6, 0x95, 0xa4, 0x51, 0xc3,
	0xd0, 0xf1, 0x53, 0xb4, 0x59, 0x00, 0x05, 0xbc, 0x8a, 0x21, 0x92, 0x8a, 0x51, 0x9f, 0x81, 0x3b,
	0x87, 0x2f, 0x2d, 0x6c, 0x8d, 0x24, 0x15, 0x52, 0x49, 0xee, 0x81, 0x30, 0x2e, 0xe0, 0x27, 0x68,
	0xa3, 0x30, 0x65, 0x81, 0x17, 0xba, 0x20, 0x41, 0xb5, 0x02, 0xd1, 0xa8, 0xb9, 0x41, 0x4b, 0xc1,
	0x1e, 0xb0, 0x58, 0xf2, 0xc0, 0x37, 0x2e, 0xe2, 0x0d, 0xf4, 0xb0, 0x40, 0xd7, 0x28, 0x77, 0xcb,
	0xc8, 0x4b, 0xf8, 0x1e, 0xba, 0x5d, 0xf4, 0x9d, 0x84, 0x9b, 0xac, 0x5d, 0xc6, 0x5b, 0xe8, 0x71,
	0xd9, 0xb8, 0xc4, 0xea, 0x32, 0xde, 0x45, 0xcf, 0xcf, 0x3b, 0x2f, 0xec, 0x49, 0x10, 0x3e, 0x2d,
	0x15, 0x5f, 0xc1, 0x04, 0xdd, 0x99, 0x13, 0xb3, 0x40, 0x38, 0xca, 0xa3, 0xa2, 0x01, 0xc2, 0xb8,
	0x8a, 0x77, 0x90, 0x35, 0x77, 0x7e, 0x5f, 0x72, 0x3f, 0x06, 0x45, 0x23, 0xe5, 0x43, 0xab, 0xcc,
	0x14, 0x61, 0x0b, 0x6d, 0x97, 0x7c, 0x52, 0x56, 0xe7, 0xae, 0x53, 0x26, 0x58, 0x59, 0xd8, 0x12,
	0xf1, 0x17, 0xa7, 0x89, 0xcf, 0x8b, 0x7e, 0x0d, 0x3f, 0x43, 0x66, 0xf1, 0xba, 0x84, 0x11, 0x08,
	0x79, 0xc6, 0x46, 0x40, 0x05, 0xab, 0x2b, 0x2a, 0xa5, 0xe0, 0xd5, 0x58, 0x42, 0x64, 0x5c, 0x5f,
	0xb8, 0x44, 0x94, 0x31, 0x08, 0x67, 0x34, 0x71, 0xe8, 0x50, 0x09, 0xc6, 0x0d, 0xbc, 0x89, 0x1e,
	0xfd, 0xe7, 0xbf, 0xff, 0x43, 0x6f, 0xe2, 0x6d, 0xb4, 0x5e, 0x40, 0xbd, 0xc0, 0xe1, 0xb5, 0xf6,
	0x19, 0x18, 0x8a, 0x20, 0x04, 0x21, 0x39, 0x44, 0x86, 0xb1, 0x10, 0x40, 0xc0, 0x4b, 0x60, 0x8b,
	0x01, 0x6e, 0x55, 0x7f, 0xe8, 0x83, 0x21, 0xd1, 0x8e, 0x87, 0x44, 0x3b, 0x19, 0x12, 0xfd, 0x73,
	0x4e, 0xf4, 0x6f, 0x39, 0xd1, 0x7f, 0xe6, 0x44, 0x1f, 0xe4, 0x44, 0xff, 0x95, 0x13, 0xfd, 0x77,
	0x4e, 0xb4, 0x93, 0x9c, 0xe8, 0x5f, 0x46, 0x44, 0x1b, 0x8c, 0x88, 0x76, 0x3c, 0x22, 0x1a, 0x5a,
	0x4b, 0x52, 0xb3, 0xb4, 0x6d, 0x55, 0x63, 0xa6, 0x6a, 0xe1, 0x69, 0x2d, 0x43, 0xfd, 0xf5, 0xfd,
	0xf7, 0x33, 0x74, 0x92, 0x16, 0x8a, 0xbc, 0x3b, 0x7e, 0xf8, 0xbe, 0xb4, 0x2a, 0xa7, 0x00, 0xcd,
	0x12, 0x13, 0xc6, 0x76, 0xcd, 0xca, 0x9f, 0xa5, 0xb5, 0xe9, 0x7b, 0xdb, 0xa6, 0x59, 0x62, 0xdb,
	0xe3, 0x89, 0x6d, 0x37, 0x2b, 0x6f, 0x96, 0xc7, 0xad, 0xdf, 0xf9, 0x1b, 0x00, 0x00, 0xff, 0xff,
	0x9b, 0x9b, 0x23, 0xe0, 0x21, 0x04, 0x00, 0x00,
}

func (x CommandType) String() string {
	s, ok := CommandType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
