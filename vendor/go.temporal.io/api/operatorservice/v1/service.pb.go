// The MIT License
//
// Copyright (c) 2022 Temporal Technologies Inc.  All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: temporal/api/operatorservice/v1/service.proto

package operatorservice

import (
	context "context"
	fmt "fmt"
	math "math"

	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

func init() {
	proto.RegisterFile("temporal/api/operatorservice/v1/service.proto", fileDescriptor_a603f8bc80c66d47)
}

var fileDescriptor_a603f8bc80c66d47 = []byte{
	// 444 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x94, 0xcf, 0x8b, 0xd3, 0x40,
	0x14, 0xc7, 0x33, 0x7b, 0x10, 0x19, 0x16, 0x16, 0xa2, 0x88, 0xec, 0x61, 0x16, 0x7a, 0x77, 0x42,
	0xd4, 0x55, 0x49, 0xeb, 0x8f, 0x54, 0x8f, 0x62, 0x4b, 0xab, 0x3d, 0x78, 0x91, 0x69, 0xf3, 0xd0,
	0x81, 0xd6, 0x19, 0x67, 0xa6, 0xb9, 0x09, 0x9e, 0x3c, 0x8b, 0xe0, 0x49, 0x3c, 0x78, 0x13, 0xff,
	0x12, 0x8f, 0x3d, 0xf6, 0x68, 0x53, 0x10, 0xf1, 0xd4, 0x3f, 0x41, 0x62, 0x32, 0x41, 0xd3, 0x48,
	0xda, 0xec, 0x2d, 0x24, 0xdf, 0xcf, 0x7b, 0x9f, 0xcc, 0x3c, 0x1e, 0xbe, 0x62, 0x60, 0x26, 0x85,
	0x62, 0x53, 0x8f, 0x49, 0xee, 0x09, 0x09, 0x8a, 0x19, 0xa1, 0x34, 0xa8, 0x98, 0x4f, 0xc0, 0x8b,
	0x7d, 0x2f, 0x7f, 0xa4, 0x52, 0x09, 0x23, 0xdc, 0x13, 0x1b, 0xa7, 0x4c, 0x72, 0x5a, 0x8a, 0xd3,
	0xd8, 0x3f, 0xbe, 0x51, 0x57, 0x4f, 0xc1, 0xab, 0x39, 0x68, 0xf3, 0x4c, 0x81, 0x96, 0xe2, 0xa5,
	0xce, 0x0b, 0x5f, 0xfd, 0x74, 0x1e, 0x1f, 0xf5, 0xf2, 0xf4, 0x30, 0x4b, 0xbb, 0xef, 0x11, 0xbe,
	0x10, 0x46, 0xd1, 0x10, 0x98, 0x9a, 0xbc, 0x08, 0x8d, 0x51, 0x7c, 0x3c, 0x37, 0xa0, 0xdd, 0x36,
	0xad, 0xb1, 0xa0, 0x15, 0xd4, 0x20, 0xeb, 0x7b, 0xdc, 0x69, 0x06, 0x67, 0xb2, 0x2d, 0xc7, 0xfd,
	0x88, 0xf0, 0xa5, 0x01, 0xcc, 0x44, 0x0c, 0x5b, 0x5e, 0x77, 0x6a, 0x4b, 0x57, 0x83, 0x56, 0xed,
	0x6e, 0x63, 0xbe, 0xb0, 0xfb, 0x80, 0xf0, 0xc5, 0x87, 0x5c, 0x9b, 0x2d, 0xb7, 0xfa, 0xdf, 0xae,
	0xc2, 0xac, 0xd9, 0xed, 0x86, 0x74, 0xe1, 0xf5, 0x16, 0xe1, 0xa3, 0x07, 0x30, 0x05, 0x03, 0x8f,
	0xd8, 0x0c, 0xb4, 0x64, 0x13, 0x70, 0x6f, 0xd6, 0x16, 0x2d, 0x11, 0xd6, 0xe6, 0xd6, 0xfe, 0x60,
	0x21, 0xf2, 0x19, 0xe1, 0xcb, 0x61, 0x14, 0xf5, 0xd4, 0x13, 0x19, 0x31, 0x03, 0xe9, 0x81, 0x1a,
	0xb8, 0x3f, 0x9d, 0x6b, 0x03, 0xca, 0xbd, 0xb7, 0xcb, 0x6c, 0x54, 0xa2, 0x56, 0x2d, 0x3c, 0x43,
	0x85, 0xc2, 0x31, 0x9d, 0xfb, 0xec, 0xa6, 0xff, 0xd5, 0x6b, 0xef, 0x38, 0x1f, 0x95, 0x66, 0x9d,
	0x66, 0x70, 0x21, 0xf5, 0x1a, 0x1f, 0xa6, 0x77, 0x9c, 0x7f, 0xd0, 0xee, 0xf5, 0x9d, 0x46, 0xc2,
	0xc6, 0xad, 0xc5, 0xe9, 0x9e, 0x94, 0x6d, 0xdf, 0xfd, 0x81, 0x16, 0x2b, 0xe2, 0x2c, 0x57, 0xc4,
	0xd9, 0xac, 0x08, 0x7a, 0x93, 0x10, 0xf4, 0x25, 0x21, 0xe8, 0x5b, 0x42, 0xd0, 0x22, 0x21, 0xe8,
	0x7b, 0x42, 0xd0, 0xcf, 0x84, 0x38, 0x9b, 0x84, 0xa0, 0x77, 0x6b, 0xe2, 0x2c, 0xd6, 0xc4, 0x59,
	0xae, 0x89, 0x83, 0x5b, 0x5c, 0xd4, 0x75, 0xec, 0x1e, 0xe6, 0xfb, 0xa6, 0x9f, 0x2e, 0xa2, 0x3e,
	0x7a, 0x7a, 0xfa, 0xfc, 0x2f, 0x86, 0x8b, 0xff, 0x2c, 0xb2, 0x76, 0xe9, 0xd5, 0xd7, 0x83, 0x93,
	0xc7, 0x16, 0x0a, 0x25, 0xa7, 0xa5, 0x65, 0x46, 0x47, 0xfe, 0xaf, 0x83, 0x96, 0x4d, 0x04, 0x41,
	0x28, 0x79, 0x10, 0x94, 0x32, 0x41, 0x30, 0xf2, 0xc7, 0xe7, 0xfe, 0xec, 0xc3, 0x6b, 0xbf, 0x03,
	0x00, 0x00, 0xff, 0xff, 0xaa, 0xb2, 0x94, 0x7e, 0x99, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// OperatorServiceClient is the client API for OperatorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OperatorServiceClient interface {
	// AddSearchAttributes add custom search attributes.
	//
	// Returns ALREADY_EXISTS status code if a Search Attribute with any of the specified names already exists
	// Returns INTERNAL status code with temporal.api.errordetails.v1.SystemWorkflowFailure in Error Details if registration process fails,
	AddSearchAttributes(ctx context.Context, in *AddSearchAttributesRequest, opts ...grpc.CallOption) (*AddSearchAttributesResponse, error)
	// RemoveSearchAttributes removes custom search attributes.
	//
	// Returns NOT_FOUND status code if a Search Attribute with any of the specified names is not registered
	RemoveSearchAttributes(ctx context.Context, in *RemoveSearchAttributesRequest, opts ...grpc.CallOption) (*RemoveSearchAttributesResponse, error)
	// ListSearchAttributes returns comprehensive information about search attributes.
	ListSearchAttributes(ctx context.Context, in *ListSearchAttributesRequest, opts ...grpc.CallOption) (*ListSearchAttributesResponse, error)
	// DeleteNamespace synchronously deletes a namespace and asynchronously reclaims all namespace resources.
	// (-- api-linter: core::0135::method-signature=disabled
	//     aip.dev/not-precedent: DeleteNamespace RPC doesn't follow Google API format. --)
	// (-- api-linter: core::0135::response-message-name=disabled
	//     aip.dev/not-precedent: DeleteNamespace RPC doesn't follow Google API format. --)
	DeleteNamespace(ctx context.Context, in *DeleteNamespaceRequest, opts ...grpc.CallOption) (*DeleteNamespaceResponse, error)
	// AddOrUpdateRemoteCluster adds or updates remote cluster.
	AddOrUpdateRemoteCluster(ctx context.Context, in *AddOrUpdateRemoteClusterRequest, opts ...grpc.CallOption) (*AddOrUpdateRemoteClusterResponse, error)
	// RemoveRemoteCluster removes remote cluster.
	RemoveRemoteCluster(ctx context.Context, in *RemoveRemoteClusterRequest, opts ...grpc.CallOption) (*RemoveRemoteClusterResponse, error)
	// ListClusters returns information about Temporal clusters.
	ListClusters(ctx context.Context, in *ListClustersRequest, opts ...grpc.CallOption) (*ListClustersResponse, error)
}

type operatorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOperatorServiceClient(cc grpc.ClientConnInterface) OperatorServiceClient {
	return &operatorServiceClient{cc}
}

func (c *operatorServiceClient) AddSearchAttributes(ctx context.Context, in *AddSearchAttributesRequest, opts ...grpc.CallOption) (*AddSearchAttributesResponse, error) {
	out := new(AddSearchAttributesResponse)
	err := c.cc.Invoke(ctx, "/temporal.api.operatorservice.v1.OperatorService/AddSearchAttributes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorServiceClient) RemoveSearchAttributes(ctx context.Context, in *RemoveSearchAttributesRequest, opts ...grpc.CallOption) (*RemoveSearchAttributesResponse, error) {
	out := new(RemoveSearchAttributesResponse)
	err := c.cc.Invoke(ctx, "/temporal.api.operatorservice.v1.OperatorService/RemoveSearchAttributes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorServiceClient) ListSearchAttributes(ctx context.Context, in *ListSearchAttributesRequest, opts ...grpc.CallOption) (*ListSearchAttributesResponse, error) {
	out := new(ListSearchAttributesResponse)
	err := c.cc.Invoke(ctx, "/temporal.api.operatorservice.v1.OperatorService/ListSearchAttributes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorServiceClient) DeleteNamespace(ctx context.Context, in *DeleteNamespaceRequest, opts ...grpc.CallOption) (*DeleteNamespaceResponse, error) {
	out := new(DeleteNamespaceResponse)
	err := c.cc.Invoke(ctx, "/temporal.api.operatorservice.v1.OperatorService/DeleteNamespace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorServiceClient) AddOrUpdateRemoteCluster(ctx context.Context, in *AddOrUpdateRemoteClusterRequest, opts ...grpc.CallOption) (*AddOrUpdateRemoteClusterResponse, error) {
	out := new(AddOrUpdateRemoteClusterResponse)
	err := c.cc.Invoke(ctx, "/temporal.api.operatorservice.v1.OperatorService/AddOrUpdateRemoteCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorServiceClient) RemoveRemoteCluster(ctx context.Context, in *RemoveRemoteClusterRequest, opts ...grpc.CallOption) (*RemoveRemoteClusterResponse, error) {
	out := new(RemoveRemoteClusterResponse)
	err := c.cc.Invoke(ctx, "/temporal.api.operatorservice.v1.OperatorService/RemoveRemoteCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorServiceClient) ListClusters(ctx context.Context, in *ListClustersRequest, opts ...grpc.CallOption) (*ListClustersResponse, error) {
	out := new(ListClustersResponse)
	err := c.cc.Invoke(ctx, "/temporal.api.operatorservice.v1.OperatorService/ListClusters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OperatorServiceServer is the server API for OperatorService service.
type OperatorServiceServer interface {
	// AddSearchAttributes add custom search attributes.
	//
	// Returns ALREADY_EXISTS status code if a Search Attribute with any of the specified names already exists
	// Returns INTERNAL status code with temporal.api.errordetails.v1.SystemWorkflowFailure in Error Details if registration process fails,
	AddSearchAttributes(context.Context, *AddSearchAttributesRequest) (*AddSearchAttributesResponse, error)
	// RemoveSearchAttributes removes custom search attributes.
	//
	// Returns NOT_FOUND status code if a Search Attribute with any of the specified names is not registered
	RemoveSearchAttributes(context.Context, *RemoveSearchAttributesRequest) (*RemoveSearchAttributesResponse, error)
	// ListSearchAttributes returns comprehensive information about search attributes.
	ListSearchAttributes(context.Context, *ListSearchAttributesRequest) (*ListSearchAttributesResponse, error)
	// DeleteNamespace synchronously deletes a namespace and asynchronously reclaims all namespace resources.
	// (-- api-linter: core::0135::method-signature=disabled
	//     aip.dev/not-precedent: DeleteNamespace RPC doesn't follow Google API format. --)
	// (-- api-linter: core::0135::response-message-name=disabled
	//     aip.dev/not-precedent: DeleteNamespace RPC doesn't follow Google API format. --)
	DeleteNamespace(context.Context, *DeleteNamespaceRequest) (*DeleteNamespaceResponse, error)
	// AddOrUpdateRemoteCluster adds or updates remote cluster.
	AddOrUpdateRemoteCluster(context.Context, *AddOrUpdateRemoteClusterRequest) (*AddOrUpdateRemoteClusterResponse, error)
	// RemoveRemoteCluster removes remote cluster.
	RemoveRemoteCluster(context.Context, *RemoveRemoteClusterRequest) (*RemoveRemoteClusterResponse, error)
	// ListClusters returns information about Temporal clusters.
	ListClusters(context.Context, *ListClustersRequest) (*ListClustersResponse, error)
}

// UnimplementedOperatorServiceServer can be embedded to have forward compatible implementations.
type UnimplementedOperatorServiceServer struct {
}

func (*UnimplementedOperatorServiceServer) AddSearchAttributes(ctx context.Context, req *AddSearchAttributesRequest) (*AddSearchAttributesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSearchAttributes not implemented")
}
func (*UnimplementedOperatorServiceServer) RemoveSearchAttributes(ctx context.Context, req *RemoveSearchAttributesRequest) (*RemoveSearchAttributesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveSearchAttributes not implemented")
}
func (*UnimplementedOperatorServiceServer) ListSearchAttributes(ctx context.Context, req *ListSearchAttributesRequest) (*ListSearchAttributesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSearchAttributes not implemented")
}
func (*UnimplementedOperatorServiceServer) DeleteNamespace(ctx context.Context, req *DeleteNamespaceRequest) (*DeleteNamespaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNamespace not implemented")
}
func (*UnimplementedOperatorServiceServer) AddOrUpdateRemoteCluster(ctx context.Context, req *AddOrUpdateRemoteClusterRequest) (*AddOrUpdateRemoteClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOrUpdateRemoteCluster not implemented")
}
func (*UnimplementedOperatorServiceServer) RemoveRemoteCluster(ctx context.Context, req *RemoveRemoteClusterRequest) (*RemoveRemoteClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveRemoteCluster not implemented")
}
func (*UnimplementedOperatorServiceServer) ListClusters(ctx context.Context, req *ListClustersRequest) (*ListClustersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListClusters not implemented")
}

func RegisterOperatorServiceServer(s *grpc.Server, srv OperatorServiceServer) {
	s.RegisterService(&_OperatorService_serviceDesc, srv)
}

func _OperatorService_AddSearchAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSearchAttributesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServiceServer).AddSearchAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/temporal.api.operatorservice.v1.OperatorService/AddSearchAttributes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServiceServer).AddSearchAttributes(ctx, req.(*AddSearchAttributesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperatorService_RemoveSearchAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveSearchAttributesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServiceServer).RemoveSearchAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/temporal.api.operatorservice.v1.OperatorService/RemoveSearchAttributes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServiceServer).RemoveSearchAttributes(ctx, req.(*RemoveSearchAttributesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperatorService_ListSearchAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSearchAttributesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServiceServer).ListSearchAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/temporal.api.operatorservice.v1.OperatorService/ListSearchAttributes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServiceServer).ListSearchAttributes(ctx, req.(*ListSearchAttributesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperatorService_DeleteNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServiceServer).DeleteNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/temporal.api.operatorservice.v1.OperatorService/DeleteNamespace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServiceServer).DeleteNamespace(ctx, req.(*DeleteNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperatorService_AddOrUpdateRemoteCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOrUpdateRemoteClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServiceServer).AddOrUpdateRemoteCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/temporal.api.operatorservice.v1.OperatorService/AddOrUpdateRemoteCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServiceServer).AddOrUpdateRemoteCluster(ctx, req.(*AddOrUpdateRemoteClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperatorService_RemoveRemoteCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveRemoteClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServiceServer).RemoveRemoteCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/temporal.api.operatorservice.v1.OperatorService/RemoveRemoteCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServiceServer).RemoveRemoteCluster(ctx, req.(*RemoveRemoteClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperatorService_ListClusters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListClustersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServiceServer).ListClusters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/temporal.api.operatorservice.v1.OperatorService/ListClusters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServiceServer).ListClusters(ctx, req.(*ListClustersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _OperatorService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "temporal.api.operatorservice.v1.OperatorService",
	HandlerType: (*OperatorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddSearchAttributes",
			Handler:    _OperatorService_AddSearchAttributes_Handler,
		},
		{
			MethodName: "RemoveSearchAttributes",
			Handler:    _OperatorService_RemoveSearchAttributes_Handler,
		},
		{
			MethodName: "ListSearchAttributes",
			Handler:    _OperatorService_ListSearchAttributes_Handler,
		},
		{
			MethodName: "DeleteNamespace",
			Handler:    _OperatorService_DeleteNamespace_Handler,
		},
		{
			MethodName: "AddOrUpdateRemoteCluster",
			Handler:    _OperatorService_AddOrUpdateRemoteCluster_Handler,
		},
		{
			MethodName: "RemoveRemoteCluster",
			Handler:    _OperatorService_RemoveRemoteCluster_Handler,
		},
		{
			MethodName: "ListClusters",
			Handler:    _OperatorService_ListClusters_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "temporal/api/operatorservice/v1/service.proto",
}
