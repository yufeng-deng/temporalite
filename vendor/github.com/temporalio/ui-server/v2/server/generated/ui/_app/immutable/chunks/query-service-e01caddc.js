import{r as p,a as f,d as l}from"./route-for-api-652ea8c7.js";import{g as m,c as h,a as _}from"./get-encoder-endpoint-25b0520a.js";import{s as d,p as g}from"./parse-with-big-int-561ccb8b.js";const I=t=>{const a=t.indexOf("["),n=t.indexOf("]");return t.slice(a+1,n).split(" ").filter(r=>r!=="__stack_trace").map(r=>r.endsWith(",")?r.slice(0,r.length-1):r)},T=async(t,a)=>(a=await a,{namespace:t,workflowId:a.id,runId:a.runId});async function y({workflow:t,namespace:a,queryType:n},r=fetch,e){t=await t;const c=await T(a,t),s=await p("query",c);return await f(s,{options:{method:"POST",body:d({execution:{workflowId:t.id,runId:t.runId},query:{queryType:n}})},request:r,onError:e,notifyOnError:!1})}async function E(t,a=fetch){return new Promise((n,r)=>{y({...t,queryType:"@@temporal-internal__list"},a,e=>{l(e.body)&&e.body.message.includes("@@temporal-internal__list")?n(I(e.body.message)):r(e)})})}async function O(t,a,n,r=fetch){return y(t,r).then(async e=>{const{queryResult:c}=e!=null?e:{queryResult:{payloads:[]}};let s=c.payloads;try{if(s[0]){const o=m(a),u={...a,codec:{...a==null?void 0:a.codec,endpoint:o}},i=o?await h({attributes:c,namespace:t.namespace,settings:u,accessToken:n}):await _(c);s=i==null?void 0:i.payloads[0]}return g(s)}catch{return typeof s!="string"?d(s):s}})}async function q(t,a,n){return O({...t,queryType:"__stack_trace"},a,n)}export{O as a,q as b,E as g};
